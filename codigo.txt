src/index.js
import { createRoot } from "react-dom/client";
import App from "./App";

const root = createRoot(document.querySelector("#root"));
root.render(<App />);

src/App.js

import React from "react";
import { AuthProvider } from "./contexts/auth";
import RoutesApp from "./routes";
import GlobalStyle from "./styles/global";

const App = () => {
  return (
    <>
      <GlobalStyle />
      <AuthProvider>
        <RoutesApp />
      </AuthProvider>
    </>
  );
};

export default App;

src/styles/global.js

import { createGlobalStyle } from "styled-components";

const GlobalStyle = createGlobalStyle`
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    width: 100vw;
    height: 100vh;
    background-color: #f0f2f5;
    font-family: Arial, Helvetica, sans-serif;
    font-size: ${({ fontSize }) => fontSize || '16px'}; /* Usando variável de tamanho de fonte */
    transition: font-size 0.3s ease; /* Transição suave ao mudar o tamanho da fonte */
  }

   button, input, select, textarea {
    font-size: inherit;
  }
`;

export default GlobalStyle;

src/services/personService.js

import api from './api';

export const searchPersonName = async (personData) =>{
    try {
        const response = await api.get(`/pessoas/search/nome/${personData}`);
        return response.data;
      } catch (error) {
        throw new Error('Erro ao buscar pessoas:', error);
      }


};

export const searchPersonCpf = async (personData) =>{
    try {
        const response = await api.get(`/pessoas/search/like/cpf/${personData}`);
        return response.data;
      } catch (error) {
        throw new Error('Erro ao buscar pessoas:', error);
      }


};

src/services/userService.js

import api from './api';

export const createUser = async (userData) => {
  try {
    const response = await api.post('/usuarios/create', userData);
    return response.data;
  } catch (error) {
    throw new Error('Erro ao criar usuário. Tente novamente.');
  }
};



src/services/api.js

import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:8080/api',
});

api.interceptors.request.use(config => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default api;

src/routes/index.js
import { Fragment } from "react";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import useAuth from "../hooks/useAuth";
import Home from "../pages/Home";
import Signin from "../pages/Signin";
import CadastrarUsuario from "../pages/CadastrarUsuario";
import ConsultarPessoa from "../pages/ConsultarPessoa";

const Private = ({ Item }) => {
  const { signed } = useAuth();
  return signed ? <Item /> : <Signin />;
};

const RoutesApp = () => {
  return (
    <BrowserRouter>
      <Fragment>
        <Routes>
          
          
          <Route exact path="/home" element={<Private Item={Home} />} />
          <Route exact path="/cadastrar" element={<Private Item={CadastrarUsuario} />} /> {/* Add new route */}
          <Route exact path="/consultar-Pessoa" element={<Private Item={ConsultarPessoa} />} />  
          
          <Route path="/" element={<Signin />} />
          <Route path="*" element={<Signin />} />
        </Routes>
      </Fragment>
    </BrowserRouter>
  );
};

export default RoutesApp;

src/pages/CadastrarUsuario/index.js


import React, { useState } from "react";
import Button from "../../components/Button";
import { createUser } from "../../services/userService";
import * as C from "./styles";

const CadastrarUsuario = ({ onUserCreated, fontSize }) => {
  const [newUser, setNewUser] = useState({ nome: "", cpf: "", rg: "" });
  const [createUserError, setCreateUserError] = useState("");

  const handleCreateUser = async (e) => {
    e.preventDefault();
    try {
      await createUser(newUser); // Usando o serviço de criação de usuário
      setNewUser({ nome: "", cpf: "", rg: "" });
      alert("Usuário criado com sucesso!");
      if (onUserCreated) onUserCreated();
    } catch (error) {
      setCreateUserError(error.message);
    }
  };

  return (
    <C.Content style={{ fontSize: fontSize }}>
      <C.Title>Cadastrar Novo Usuário</C.Title>
      <C.Form onSubmit={handleCreateUser} style={{ fontSize: fontSize }}>
        <C.Input
          type="text"
          placeholder="Nome"
          value={newUser.nome}
          onChange={(e) => setNewUser({ ...newUser, nome: e.target.value })}
          required
        />
        <C.Input
          type="text"
          placeholder="CPF"
          value={newUser.cpf}
          onChange={(e) => setNewUser({ ...newUser, cpf: e.target.value })}
          required
        />
        <C.Input
          type="text"
          placeholder="RG"
          value={newUser.rg}
          onChange={(e) => setNewUser({ ...newUser, rg: e.target.value })}
          required
        />
        <C.AlignRight>
          <Button Text="Criar Usuário" Type="submit" />
        </C.AlignRight>
        {createUserError && <C.ErrorMessage>{createUserError}</C.ErrorMessage>}
      </C.Form>
    </C.Content>
  );
};

export default CadastrarUsuario;


src/pages/CadastrarUsuario/styles.js

import styled from "styled-components";

export const Container = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #fff;
`;

export const Content = styled.div`
  background-color: white;
  padding: 30px;
  border-radius: 5px;
  width: 100%;
`;

export const Title = styled.h2`

  margin-bottom: 20px;
  text-align: center;
`;

export const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: 15px;
`;

export const Input = styled.input`
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;

`;

export const ErrorMessage = styled.p`
  color: red;
  font-size: 14px;
  margin-top: 5px;
`;


// Estilos para alinhamento de botões
export const AlignLeft = styled.div`
  display: flex;
  justify-content: flex-start; /* Alinhamento à esquerda */
`;

export const AlignRight = styled.div`
  display: flex;
  justify-content: flex-end; /* Alinhamento à direita */
`;

export const AlignJustify = styled.div`
  display: flex;
  justify-content: space-between; /* Justifica os botões, ocupando todo o espaço */
  width: 100%; /* Para garantir que ocupe toda a largura */
`;

src/pages/ConsultarPessoa/index.js

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { searchPersonName, searchPersonCpf } from '../../services/personService'
import * as C from './styles';

const ConsultarPessoa = () => {
  const [nome, setNome] = useState('');
  const [pessoas, setPessoas] = useState([]);
  const [loading, setLoading] = useState(false);
  const [createUserError, setCreateUserError] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const fetchPessoas = async () => {
      if (nome.length > 2) {
        setLoading(true);
        try {
           // Verifica se é uma string composta apenas por números (tratado como CPF)
          if (/^\d+$/.test(nome)) {
            // Se for uma string de números, trata como CPF
            const result = await searchPersonCpf(nome);
            setPessoas(result);
          } else {
            // Se não for uma string de números, trata como nome
            const result = await searchPersonName(nome);
            setPessoas(result);
          }
            
          } catch (error) {
            setCreateUserError(error.message);
            setPessoas([]);
          }
        setLoading(false);
      } else {
        setPessoas([]);
      }
    };

    fetchPessoas();
  }, [nome]);

  const handleClick = (idPessoa) => {
    navigate(`/editar/${idPessoa}`);
  };

  return (
    <C.Container>
      <C.Input
        type="text"
        placeholder="Digite o nome ou cpf(somente números) para buscar"
        value={nome}
        onChange={(e) => setNome(e.target.value)}
      />
      {loading && <p>Carregando...</p>}
      {createUserError && <C.ErrorMessage>{createUserError}</C.ErrorMessage>}
      <C.List>
        {pessoas.map((pessoa) => (
          <C.ListItem key={pessoa.idPessoa} onClick={() => handleClick(pessoa.idPessoa)}>
            <p>{pessoa.nome}</p>
            <p>{pessoa.cpf}</p>
          </C.ListItem>
        ))}
      </C.List>
    </C.Container>
  );
};

export default ConsultarPessoa;



src/pages/ConsultarPessoa/style.js

import styled from 'styled-components';

export const Container = styled.div`
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
`;

export const Input = styled.input`
  width: 100%;
  padding: 10px;
  margin-bottom: 20px;
  border: 1px solid #ccc;
  border-radius: 4px;
`;

export const List = styled.ul`
  list-style-type: none;
  padding: 0;
`;

export const ListItem = styled.li`
  display: flex;
  justify-content: space-between;
  padding: 10px;
  background-color: #f9f9f9;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-bottom: 10px;
  cursor: pointer;

  &:hover {
    background-color: #ececec;
  }

  p {
    margin: 0;
  }
`;
export const ErrorMessage = styled.p`
  color: red;
  font-size: 14px;
  margin-top: 5px;
`;




src/pages/Home/index.js

import React, { useState } from "react";
import { Link } from "react-router-dom";
import useAuth from "../../hooks/useAuth";
import * as C from "./styles";
import CadastrarUsuario from "../CadastrarUsuario";
import ConsultarPessoa from "../ConsultarPessoa";

const Home = () => {
  const { signout, user } = useAuth();
  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);
  const [activePage, setActivePage] = useState("home");
  const [fontSize, setFontSize] = useState('16px');

  const handleSignout = () => {
    signout();
  };

  const handlePageChange = (page) => {
    setActivePage(page);
  };

  const handleUserCreated = () => {
    setActivePage("home");
  };

  const increaseFontSize = () => {
    const newSize = parseInt(fontSize) + 2;
    setFontSize(`${newSize}px`);
  };

  const decreaseFontSize = () => {
    const newSize = parseInt(fontSize) - 2;
    if (newSize >= 12) {
      setFontSize(`${newSize}px`);
    }
  };

  const handleUserQueried = (queriedUser) => {
    // Ação a ser realizada após consultar o usuário
    console.log("Usuário consultado:", queriedUser);
  };

  return (
    <C.Container>
      <C.Header>
        <C.Title>MOTOCHEK</C.Title>
        <C.FontControls>
          <C.FontButton onClick={increaseFontSize}>A+</C.FontButton>
          <C.FontButton onClick={decreaseFontSize}>A-</C.FontButton>
        </C.FontControls>
        <C.MenuButton onClick={() => setIsMobileSidebarOpen(!isMobileSidebarOpen)}>
          ☰
        </C.MenuButton>
      </C.Header>

      <C.Sidebar  style={{ fontSize: fontSize }}>
        <C.SidebarLink as={Link} to="#" onClick={() => handlePageChange("home")}>
          Home
        </C.SidebarLink>
        <C.SidebarLink as={Link} to="#" onClick={() => handlePageChange("cadastrarUsuario")}>
          Cadastrar Usuário
        </C.SidebarLink>
        <C.SidebarLink as={Link} to="#" onClick={() => handlePageChange("consultarPessoa")}>
          Consultar Pessoa
        </C.SidebarLink>
        <C.SidebarLink as={Link} to="#" onClick={handleSignout}>
          Sair
        </C.SidebarLink>
      </C.Sidebar>

      <C.Main>
        <C.Content style={{ fontSize: fontSize }}>
          {activePage === "home" && (
            <C.UserInfo>
              <h2>Bem-vindo, {user?.usuario}!</h2>
              <p>CPF: {user?.cpf}</p>
            </C.UserInfo>
          )}
          {activePage === "cadastrarUsuario" && (
            <CadastrarUsuario onUserCreated={handleUserCreated} fontSize={fontSize} />
          )} 
          {activePage === "consultarPessoa" && (
            <ConsultarPessoa onUserQueried={handleUserQueried} fontSize={fontSize} />
          )}
        </C.Content>
      </C.Main>
    </C.Container>
  );
};

export default Home;


src/pages/Home/styles.js

import styled from "styled-components";
import { Link } from "react-router-dom"; // Import Link do react-router-dom

export const Container = styled.div`
  display: grid;
  grid-template-areas:
    "header header"
    "sidebar main";
  grid-template-columns: 250px 1fr;
  grid-template-rows: 60px 1fr;
  height: 100vh;

  @media (max-width: 768px) {
    grid-template-areas:
      "header"
      "main";
    grid-template-columns: 1fr;
    grid-template-rows: 60px 1fr;
  }
`;


export const Main = styled.main`
  grid-area: main;
  padding: 20px;
  overflow-y: auto;
`;

export const Title = styled.h1`
  font-size: 24px;
  margin: 0;
`;

export const MenuButton = styled.button`
  display: none;
  background: none;
  border: none;
  color: white;
  font-size: 24px;
  cursor: pointer;

  @media (max-width: 768px) {
    display: block;
  }
`;


export const Content = styled.div`
  background-color: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
`;

export const UserInfo = styled.div`
  margin-bottom: 20px;
`;

export const LogoutButton = styled.button`
  background-color: #046ee5;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  margin-top: 10px;

  &:hover {
    background-color: #0356b3;
  }
`;

export const SidebarLink = styled(Link)`
  text-decoration: none;
  color: #000;
  padding: 10px 0;
  display: block;
  &:hover {
    color: #046ee5;
  }
`;
export const Sidebar = styled.nav`
  width: 250px;
  background-color: #fff;
  padding: 20px;
  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);

  @media (max-width: 768px) {
    width: 100%; /* Sidebar ocupa 100% da largura em telas pequenas */
    display: none; /* Esconde a sidebar por padrão */
  }

  &.active {
    display: block; /* Adiciona classe para mostrar sidebar ao ativá-la */
  }
`;

export const Header = styled.header`
  grid-area: header;
  background-color: #046ee5;
  color: white;
  padding: 0 20px;
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

export const FontControls = styled.div`
  display: flex;
  gap: 10px;
`;

export const FontButton = styled.button`
  background-color: white;
  color: #046ee5;
  border: none;
  padding: 5px 10px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 14px;
  font-weight: bold;

  &:hover {
    background-color: #e0e0e0;
  }
`;

src/pages/Signin/index.js

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import Button from "../../components/Button";
import Input from "../../components/Input";
import useAuth from "../../hooks/useAuth";
import * as C from "./styles";

const Signin = () => {
  const { signin } = useAuth();
  const navigate = useNavigate();

  const [login, setLogin] = useState("");
  const [senha, setSenha] = useState("");
  const [error, setError] = useState("");

  const handleLogin = async () => {
    if (!login || !senha) {
      setError("Preencha todos os campos");
      return;
    }

    const res = await signin(login, senha);

    if (res) {
      setError(res);
      return;
    }

    navigate("/home");
  };

  return (
    <C.Container>
      <C.Label>MOTOCHEK - LOGIN</C.Label>
      <C.Content>
        <Input
          type="text"
          placeholder="Digite seu CPF"
          value={login}
          onChange={(e) => [setLogin(e.target.value), setError("")]}
        />
        <Input
          type="password"
          placeholder="Digite sua Senha"
          value={senha}
          onChange={(e) => [setSenha(e.target.value), setError("")]}
        />
        <C.labelError>{error}</C.labelError>
        <Button Text="Entrar" onClick={handleLogin} />
      </C.Content>
    </C.Container>
  );
};

export default Signin;

src/pages/Signin/styles.js

import styled from "styled-components";

export const Container = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  gap: 10px;
  height: 100vh;
`;

export const Content = styled.div`
  gap: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  width: 100%;
  box-shadow: 0 1px 2px #0003;
  background-color: white;
  max-width: 350px;
  padding: 20px;
  border-radius: 5px;
`;

export const Label = styled.label`
  font-size: 18px;
  font-weight: 600;
  color: #676767;
`;

export const LabelSignup = styled.label`
  font-size: 16px;
  color: #676767;
`;

export const labelError = styled.label`
  font-size: 14px;
  color: red;
`;

export const Strong = styled.strong`
  cursor: pointer;

  a {
    text-decoration: none;
    color: #676767;
  }
`;

src/hooks/useAuth.js

import { useContext } from "react";
import { AuthContext } from "../contexts/auth";

const useAuth = () => {
  const context = useContext(AuthContext);
  return context;
};

export default useAuth;

use/src/contexts/auth.js

import { createContext, useState, useEffect } from "react";
import api from "../services/api";

export const AuthContext = createContext({});

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const token = localStorage.getItem("token");
    const userStored = localStorage.getItem("user");
    if (token && userStored) {
      setUser(JSON.parse(userStored));
      api.defaults.headers.Authorization = `Bearer ${token}`;
    }
  }, []);

  const signin = async (login, senha) => {
    try {
      const response = await api.post("/usuarios/authenticate", { login, senha });
      const { usuario, cpf, token } = response.data;
      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify({ usuario, cpf }));
      //api.defaults.headers.Authorization = `Bearer ${token}`;
      setUser({ usuario, cpf });
      return "";
    } catch (error) {
      if (error.response) {
        // O servidor respondeu com um status que não é 2xx
        console.error("Erro no servidor:", error.response.data); // Imprime o erro do servidor no console
        return error.response?.data?.message || "Login ou senha incorretos";
      } else if (error.request) {
        // O request foi feito, mas não houve resposta
        console.error("Erro de conexão. O servidor não está respondendo:", error.request); // Imprime o erro de request no console
        return "Erro de conexão. O servidor não está respondendo no momento.";
      } else {
        // Um erro foi gerado ao configurar o request
        console.error("Erro inesperado:", error.message); // Imprime qualquer outro erro no console
        return "Ocorreu um erro inesperado. Tente novamente.";
      }
    }
  };

  const signout = async () => {
    try {
      console.log("Token enviado no logout:", api.defaults.headers.Authorization);
      await api.post("/usuarios/logout");
    } catch (error) {
      console.error("Erro ao fazer logout:", error);
    }
    setUser(null);
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    api.defaults.headers.Authorization = undefined;
  };

  return (
    <AuthContext.Provider
      value={{ user, signed: !!user, signin, signout }}
    >
      {children}
    </AuthContext.Provider>
  );
};



src/components/Button/index.js

import React from "react";
import * as C from "./styles";

const Button = ({ Text, onClick, Type = "button" }) => {
  return (
    <C.Button type={Type} onClick={onClick}>
      {Text}
    </C.Button>
  );
};

export default Button;

src/components/Button/styles.js
import styled from "styled-components";

export const Button = styled.button`
  padding: 16px 20px;
  outline: none;
  border: none;
  border-radius: 5px;
  width: 100%;
  cursor: pointer;
  background-color: #046ee5;
  color: white;
  font-weight: 600;
  font-size: 16px;
  max-width: 350px;
`;


src/components/Input/index.js
import React from "react";
import * as C from "./styles";

const Input = ({ type, placeholder, value, onChange }) => {
  return (
    <C.Input
      value={value}
      onChange={onChange}
      type={type}
      placeholder={placeholder}
    />
  );
};

export default Input;

src/components/Input/styles.js

import styled from "styled-components";

export const Input = styled.input`
  outline: none;
  padding: 16px 20px;
  width: 100%;
  border-radius: 5px;
  font-size: 16px;

  background-color: #f0f2f5;
  border: none;
`;




